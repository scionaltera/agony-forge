# The following parameters should work as-is if you are running the game locally with docker-compose.
# These parameters govern how The Agony Forge locates the services it needs, such as the database and
# STOMP message broker.
#
# If you are not using the provided docker-compose configuration, you can change the variables listed
# to hook your deployment up to the services it needs.

# The following are parameters for finding MySQL.
AGONY_DATASOURCE_JDBC_URL=jdbc:mysql://mysql:3306/agonyforge
AGONY_DATASOURCE_USERNAME=agonyforge
AGONY_DATASOURCE_PASSWORD=agonyforge

# The following are parameters for finding AWS.
AWS_ACCESS_KEY_ID=EXAMPLEKEYID
AWS_SECRET_ACCESS_KEY=EXAMPLEKEY
DYNAMODB_ENDPOINT=http://dynamodb:8000
DYNAMODB_TABLE_NAME=agonyforge
DYNAMODB_REGION=us-west-2

# The following tell the MUD where to find ActiveMQ's STOMP connector, and the credentials to use to
# log into it both as the "System" user and a regular user.
AGONY_BROKER_SSL=false
AGONY_BROKER_HOST=activemq
AGONY_BROKER_PORT=61613
AGONY_BROKER_SYSTEM_USERNAME=admin
AGONY_BROKER_SYSTEM_PASSWORD=admin
AGONY_BROKER_CLIENT_USERNAME=agonyforge
AGONY_BROKER_CLIENT_PASSWORD=agonyforge

# You will need to go to https://developer.amazon.com and set up a security profile there. It will give you
# a client ID and secret that you can use to create an OAuth client in AWS Cognito. Then you will be able to
# fill out the information here. Remember never to commit secrets into git!
SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_CLIENTID=clientId
SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_CLIENTSECRET=clientSecret
SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_SCOPE=openid
SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_REDIRECTURI=http://localhost:8080/login/oauth2/code/cognito
SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_CLIENTNAME=AgonyEngineClientName
SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_COGNITO_ISSUERURI=https://cognito-issuer-uri
SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_COGNITO_USERNAMEATTRIBUTE=cognito:username
